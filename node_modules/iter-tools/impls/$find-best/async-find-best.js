var _regeneratorRuntime = require("@babel/runtime/regenerator");

var _asyncToGenerator = require("@babel/runtime/helpers/asyncToGenerator");

var _require = require('../../internal/async-iterable.js'),
    asyncIterableCurry = _require.asyncIterableCurry;

var _require2 = require('../$find-best-or/async-find-best-or.js'),
    __asyncFindBestOr = _require2.__asyncFindBestOr;

function __asyncFindBest(_x, _x2) {
  return _asyncFindBest.apply(this, arguments);
}

function _asyncFindBest() {
  _asyncFindBest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(iterable, comparer) {
    var mapper,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mapper = _args.length > 2 && _args[2] !== undefined ? _args[2] : function (value) {
              return value;
            };
            _context.next = 3;
            return __asyncFindBestOr(iterable, undefined, comparer, mapper);

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _asyncFindBest.apply(this, arguments);
}

exports.__asyncFindBest = __asyncFindBest;
var asyncFindBest = asyncIterableCurry(__asyncFindBest, {
  reduces: true,
  minArgs: 1,
  maxArgs: 2,
  growRight: true
});
exports.asyncFindBest = asyncFindBest;