import { AsyncWrappable } from '../../types/async-iterable';
declare function asyncFindBestOr<N, T>(notFoundValue: N, comparer: (value: T, i: number) => boolean): (iterable: AsyncWrappable<T>) => Promise<T | N>;
declare function asyncFindBestOr<N, T>(notFoundValue: N, comparer: (value: T, i: number) => boolean, iterable: AsyncWrappable<T>): Promise<T | N>;
declare function asyncFindBestOr<N, T, S>(notFoundValue: N, comparer: (value: S, i: number) => boolean, mapper: (value: T, i: number) => S | Promise<S>): (iterable: AsyncWrappable<T>) => Promise<T | N>;
declare function asyncFindBestOr<N, T, S>(notFoundValue: N, comparer: (value: S, i: number) => boolean, mapper: (value: T, i: number) => S | Promise<S>, iterable: AsyncWrappable<T>): Promise<T | N>;
export { asyncFindBestOr };