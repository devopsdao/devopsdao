import { Wrappable } from '../../types/iterable';
declare function findBestOr<N, T>(notFoundValue: N, comparer: (value: T, i: number) => boolean): (iterable: Wrappable<T>) => T | N;
declare function findBestOr<N, T>(notFoundValue: N, comparer: (value: T, i: number) => boolean, iterable: Wrappable<T>): T | N;
declare function findBestOr<N, T, S>(notFoundValue: N, comparer: (value: S, i: number) => boolean, mapper: (value: T, i: number) => S): (iterable: Wrappable<T>) => T | N;
declare function findBestOr<N, T, S>(notFoundValue: N, comparer: (value: S, i: number) => boolean, mapper: (value: T, i: number) => S, iterable: Wrappable<T>): T | N;
export { findBestOr };